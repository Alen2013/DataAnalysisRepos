<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude"#>  //引进TT模板的命名空间
<#@ output extension=".cs" #>
<# CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string inputFile = @"..\\BigData.Analysis.Model\\DataModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
using System;
using BigData.Analysis.IDAL;

namespace BigData.Analysis.DAL
{
    public class DbSession : IDbSession
    {
        //一次跟数据库交互的会话，封装了所有仓储的属性，根据DbSession可以拿到仓储的属性
        <#foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name)){#>
		public IDAL.I<#=entity.Name#>Repository <#=entity.Name#>Repository
		{
		get { return new <#=entity.Name#>Repository(); }
		}
<#}#>
	
        //代表：当前应用程序跟数据库的绘画内所有的实体的变化，更新会数据库

        public int SaveChanges()
        {
            //调用EF上下文的SaveChanges方法
            return DAL.EFContextFactory.GetCurrentDbContext().SaveChanges();
        }

        public int ExcuteSql(string strSql, System.Data.Common.DbParameter[] parameters)
        {
            //return DAL.EFContextFactory.GetCurrentDbContext().ExecuteFunction(strSql, parameters);
            throw new NotImplementedException();
        }
    }
}
